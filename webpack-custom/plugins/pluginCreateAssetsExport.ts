import fs from 'fs';
import path from 'path';

import _ from 'lodash';
import webpack from 'webpack';

import { paths } from '../utils/paths';

function objToString(obj: object, exportDefault) {
  return `{\n${_.entries(obj)
    .map(
      ([itemName, fileName]) =>
        `  ${itemName}: require('${fileName}')${exportDefault ? '.default' : ''},`
    )
    .join('\n')}\n};\n`;
}

function removeFileExtension(str: string) {
  return str.replace(/\.[^/.]+$/, '');
}

const configs = [
  {
    parentPath: paths.assetsPath,
    generatedFileName: 'icons',
    filesFolderPath: './icons',
    exportDefault: false,
  },
  {
    parentPath: paths.assetsPath,
    generatedFileName: 'images',
    filesFolderPath: './images',
    exportDefault: true,
  },
];

export const pluginCreateAssetsExport = new webpack.ProgressPlugin(
  function pluginCreateAssetsExport(percentage) {
    if (percentage === 0) {
      configs.forEach(({ parentPath, generatedFileName, filesFolderPath, exportDefault }) => {
        const filePath = path.join(parentPath, `${generatedFileName}.ts`);
        const filesNames = fs.readdirSync(path.resolve(parentPath, filesFolderPath));

        const filesMapper = filesNames.reduce(
          (acc, fileName) => ({
            ...acc,
            [_.camelCase(removeFileExtension(fileName))]: `${filesFolderPath}/${fileName}`,
          }),
          {}
        );

        const fileContent = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf-8') : '';
        const newFileContent = `// This file is auto-generated by pluginCreateAssetsExport\n\nexport const ${generatedFileName} = ${objToString(
          filesMapper,
          exportDefault
        )}`;

        if (fileContent === newFileContent) return false;

        fs.writeFileSync(filePath, newFileContent, 'utf8');
      });
    }
  }
);
