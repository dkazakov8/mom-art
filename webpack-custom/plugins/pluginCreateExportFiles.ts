import fs from 'fs';
import path from 'path';

import webpack from 'webpack';

import { paths } from '../utils/paths';

/**
 * This plugin looks for files (except package.json) in folders defined below
 * and generates `_${folderName}.js` file with all exports.
 *
 * This file enables correct autocomplete for IDE on imports like
 * import { someFn } from 'utils';
 *
 */

const folders = [
  'src/api',
  'src/const',
  'src/utils',
  'src/pages',
  'src/actions',
  'server/serverUtils',
  'server/routeControllers',
];

function createExportFiles(percentage) {
  if (percentage !== 0) return;

  folders.forEach(folderName => {
    // ex. 'src/actions'
    const folderPath = path.resolve(paths.rootPath, folderName).replace(/\\/g, '/');

    // ex. '_actions.js'
    const exportFileName = `_${folderName.split('/').pop()}.ts`;

    // ex. 'src/actions/_actions.js'
    const exportFilePath = `${folderPath}/${exportFileName}`;

    // ex. ['package.json', '_actions.js']
    const skipFilesArray = ['package.json', 'messages.ts', exportFileName];

    // ex. ['myAction.js']
    const folderChildren = fs
      .readdirSync(folderPath)
      .filter(fileName => !skipFilesArray.includes(fileName));

    // ex. ''
    const exportFileContent = fs.existsSync(exportFilePath)
      ? fs.readFileSync(exportFilePath, 'utf-8')
      : '';

    /**
     * ex.
     * // This file is auto-generated by pluginCreateExportFiles
     *
     * export * from './myAction.js';
     *
     */
    const exportFileContentNew = folderChildren.reduce((template, fileName) => {
      const fileNameWithoutExtension = fileName.replace(/\.[a-z]+$/, '');

      return `${template}export * from './${fileNameWithoutExtension}';\n`;
    }, '// This file is auto-generated by pluginCreateExportFiles\n\n');

    if (exportFileContent !== exportFileContentNew) {
      fs.writeFileSync(exportFilePath, exportFileContentNew, 'utf8');
    }
  });
}

export const pluginCreateExportFiles = new webpack.ProgressPlugin(createExportFiles);
